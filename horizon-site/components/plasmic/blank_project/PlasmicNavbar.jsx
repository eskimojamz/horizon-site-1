// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: akQUwPYY2eStENCEGYmmQw
// Component: JkywaSAd1fF
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavLink from "../../NavLink"; // plasmic-import: Jgo1m2OV7s/component
import { useScreenVariants as useScreenVariantshKdOjWx6MiWhf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HKdOJWx6MIWhf/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: akQUwPYY2eStENCEGYmmQw/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: JkywaSAd1fF/css
import CallIcon from "./icons/PlasmicIcon__Call"; // plasmic-import: kxgRTdr1ZWq/icon

export const PlasmicNavbar__VariantProps = new Array();

export const PlasmicNavbar__ArgProps = new Array();

function PlasmicNavbar__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshKdOjWx6MiWhf()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"logoContainer"}
        data-plasmic-override={overrides.logoContainer}
        hasGap={true}
        className={classNames(projectcss.all, sty.logoContainer)}
      >
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"36px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "desktop") ? "36px" : "36px"
          }
          loading={"lazy"}
          src={"/plasmic/blank_project/images/logo.svg"}
        />

        <div
          data-plasmic-name={"textLogo"}
          data-plasmic-override={overrides.textLogo}
          className={classNames(projectcss.all, sty.textLogo)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__b8I4A
            )}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly")
              ? "Horizon Development"
              : "Horizon Development"}
          </div>
        </div>
      </p.Stack>

      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"navLinksContainer"}
          data-plasmic-override={overrides.navLinksContainer}
          hasGap={true}
          className={classNames(projectcss.all, sty.navLinksContainer)}
        >
          <NavLink
            activeState={"inactive"}
            className={classNames("__wab_instance", sty.navLink__qw4Cy)}
          >
            {"Communities"}
          </NavLink>

          <NavLink
            activeState={"inactive"}
            className={classNames("__wab_instance", sty.navLink__tKx0D)}
          >
            {"Listings"}
          </NavLink>

          <NavLink
            activeState={"inactive"}
            className={classNames("__wab_instance", sty.navLink__o73Wc)}
          >
            {"Agents"}
          </NavLink>

          <NavLink
            activeState={"inactive"}
            className={classNames("__wab_instance", sty.navLink__yJimb)}
          >
            {"About"}
          </NavLink>
        </p.Stack>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"phoneLink"}
          data-plasmic-override={overrides.phoneLink}
          hasGap={true}
          className={classNames(projectcss.all, sty.phoneLink)}
        >
          <CallIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__axtrU
            )}
          >
            {"718-3322-3232"}
          </div>
        </p.Stack>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "logoContainer",
    "img",
    "textLogo",
    "navLinksContainer",
    "phoneLink",
    "svg"
  ],

  logoContainer: ["logoContainer", "img", "textLogo"],
  img: ["img"],
  textLogo: ["textLogo"],
  navLinksContainer: ["navLinksContainer"],
  phoneLink: ["phoneLink", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbar__ArgProps,
      internalVariantPropNames: PlasmicNavbar__VariantProps
    });

    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logoContainer: makeNodeComponent("logoContainer"),
    img: makeNodeComponent("img"),
    textLogo: makeNodeComponent("textLogo"),
    navLinksContainer: makeNodeComponent("navLinksContainer"),
    phoneLink: makeNodeComponent("phoneLink"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
