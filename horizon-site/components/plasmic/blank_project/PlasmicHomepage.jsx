// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: akQUwPYY2eStENCEGYmmQw
// Component: 255ZHLsJKg6A
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: JkywaSAd1fF/component
import Button from "../../Button"; // plasmic-import: r83GzkdYS5/component
import RecentListingsBlock from "../../RecentListingsBlock"; // plasmic-import: j7fyymFTtU/component
import RecentListing from "../../RecentListing"; // plasmic-import: w1_vCJeiHk/component
import TextInput from "../../TextInput"; // plasmic-import: STXems54UcG/component
import CommunitiesCard from "../../CommunitiesCard"; // plasmic-import: vGOs3aFqqn/component
import TestimonialTop from "../../TestimonialTop"; // plasmic-import: Ou_f7MnAVP/component
import TestimonialBottom from "../../TestimonialBottom"; // plasmic-import: lJBkLAW_9b/component
import { useScreenVariants as useScreenVariantshKdOjWx6MiWhf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HKdOJWx6MIWhf/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: akQUwPYY2eStENCEGYmmQw/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 255ZHLsJKg6A/css
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: 0hTDVlwpCG/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: mc2OAX1cPR/icon

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

function PlasmicHomepage__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshKdOjWx6MiWhf()
  });

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"wrapper"}
            data-plasmic-override={overrides.wrapper}
            className={classNames(projectcss.all, sty.wrapper)}
          >
            <div
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              className={classNames(projectcss.all, sty.hero)}
            >
              <Navbar
                data-plasmic-name={"navbar"}
                data-plasmic-override={overrides.navbar}
                className={classNames("__wab_instance", sty.navbar)}
              />

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : hasVariant(globalVariants, "screen", "desktop")
                  ? true
                  : true
              ) ? (
                <div
                  data-plasmic-name={"mobileMenuIcon"}
                  data-plasmic-override={overrides.mobileMenuIcon}
                  className={classNames(projectcss.all, sty.mobileMenuIcon)}
                >
                  <p.PlasmicIcon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    PlasmicIconType={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? Icon6Icon
                        : hasVariant(globalVariants, "screen", "desktop")
                        ? Icon6Icon
                        : Icon6Icon
                    }
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                </div>
              ) : null}

              <p.Stack
                as={"div"}
                data-plasmic-name={"heroText"}
                data-plasmic-override={overrides.heroText}
                hasGap={true}
                className={classNames(projectcss.all, sty.heroText)}
              >
                <div
                  data-plasmic-name={"heroTextPrimary"}
                  data-plasmic-override={overrides.heroTextPrimary}
                  className={classNames(projectcss.all, sty.heroTextPrimary)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__q8Ja4
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {"Let’s find your \ndream home\nin "}
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FBA703" }}
                      >
                        {"New York"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                </div>

                <div
                  data-plasmic-name={"heroTextSm"}
                  data-plasmic-override={overrides.heroTextSm}
                  className={classNames(projectcss.all, sty.heroTextSm)}
                >
                  <div
                    data-plasmic-name={
                      "horizonDevelopmentHasHelpedNewYorkersFindAHomeTheyLoveWeGuaranteeThatWellFindSomethingGreatForYou"
                    }
                    data-plasmic-override={
                      overrides.horizonDevelopmentHasHelpedNewYorkersFindAHomeTheyLoveWeGuaranteeThatWellFindSomethingGreatForYou
                    }
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.horizonDevelopmentHasHelpedNewYorkersFindAHomeTheyLoveWeGuaranteeThatWellFindSomethingGreatForYou
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Horizon Development helps \nNew Yorkers find a home they love. \nWe guarantee we’ll find \nsomething perfect for you. "
                      : "Horizon Development helps \nNew Yorkers find a home they love. \nWe guarantee we’ll find \nsomething perfect for you. "}
                  </div>
                </div>

                <div
                  data-plasmic-name={"heroBtn"}
                  data-plasmic-override={overrides.heroBtn}
                  className={classNames(projectcss.all, sty.heroBtn)}
                >
                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    color={["primary"]}
                    size={"large"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eMm8X
                      )}
                    >
                      {"Learn More"}
                    </div>
                  </Button>
                </div>
              </p.Stack>

              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div
                  data-plasmic-name={"heroMobileGradient"}
                  data-plasmic-override={overrides.heroMobileGradient}
                  className={classNames(projectcss.all, sty.heroMobileGradient)}
                />
              ) : null}
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"recentListings"}
              data-plasmic-override={overrides.recentListings}
              hasGap={true}
              className={classNames(projectcss.all, sty.recentListings)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"recentListingsContainer"}
                  data-plasmic-override={overrides.recentListingsContainer}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.recentListingsContainer
                  )}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"recentListingsHeader"}
                    data-plasmic-override={overrides.recentListingsHeader}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.recentListingsHeader
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qaCCe
                      )}
                    >
                      {"Recently Listed"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__egQqJ
                      )}
                    >
                      {"Browse through the latest real estate listings"}
                    </div>
                  </p.Stack>

                  <RecentListingsBlock
                    data-plasmic-name={"recentListingsBlock"}
                    data-plasmic-override={overrides.recentListingsBlock}
                    className={classNames(
                      "__wab_instance",
                      sty.recentListingsBlock
                    )}
                  >
                    <RecentListing
                      className={classNames(
                        "__wab_instance",
                        sty.recentListing__uZidy
                      )}
                      recentListingImg={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__nKeCt)}
                          displayHeight={"100%"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/blank_project/images/genMid1.jpeg",
                            fullWidth: 623,
                            fullHeight: 414,
                            aspectRatio: undefined
                          }}
                        />
                      }
                    />

                    <RecentListing
                      className={classNames(
                        "__wab_instance",
                        sty.recentListing__ilvfy
                      )}
                      price={"$ 1,100,000"}
                      recentListingImg={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___3GY7U)}
                          displayHeight={"100%"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/blank_project/images/ralphRaviKayden2D4LAqAlbDaUnsplashjpg.jpeg",
                            fullWidth: 1920,
                            fullHeight: 1280,
                            aspectRatio: undefined
                          }}
                        />
                      }
                    />

                    <RecentListing
                      className={classNames(
                        "__wab_instance",
                        sty.recentListing__b5WyQ
                      )}
                      price={"$1,200,000"}
                      recentListingImg={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__hz9Nb)}
                          displayHeight={"100%"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/blank_project/images/a3B375Be83856De842B80C75Ba173D74CcFt768Jpeg.jpeg",
                            fullWidth: 768,
                            fullHeight: 576,
                            aspectRatio: undefined
                          }}
                        />
                      }
                    />
                  </RecentListingsBlock>
                </p.Stack>
              ) : null}
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"heroInfo"}
              data-plasmic-override={overrides.heroInfo}
              hasGap={true}
              className={classNames(projectcss.all, sty.heroInfo)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"heroInfoContainer"}
                data-plasmic-override={overrides.heroInfoContainer}
                hasGap={true}
                className={classNames(projectcss.all, sty.heroInfoContainer)}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"heroInfoMain"}
                    data-plasmic-override={overrides.heroInfoMain}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.heroInfoMain)}
                  >
                    <div
                      data-plasmic-name={"heroInfoTitle"}
                      data-plasmic-override={overrides.heroInfoTitle}
                      className={classNames(projectcss.all, sty.heroInfoTitle)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"heroInfoTitleText"}
                        data-plasmic-override={overrides.heroInfoTitleText}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.heroInfoTitleText
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bXamo
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Top Quality Service \nis on the Horizon"
                            : "Top Quality Service Is On The Horizon"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__o6Xri
                          )}
                        >
                          {"We’re ready to assist you"}
                        </div>
                      </p.Stack>
                    </div>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"heroInfoBody"}
                      data-plasmic-override={overrides.heroInfoBody}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.heroInfoBody)}
                    >
                      <div
                        data-plasmic-name={"heroInfoBodyImg"}
                        data-plasmic-override={overrides.heroInfoBodyImg}
                        className={classNames(
                          projectcss.all,
                          sty.heroInfoBodyImg
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__mzWk)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={
                            "https://images.unsplash.com/photo-1551524164-687a55dd1126?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1025&q=80"
                          }
                        />
                      </div>

                      {true ? (
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"heroInfoBodySide"}
                          data-plasmic-override={overrides.heroInfoBodySide}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.heroInfoBodySide
                          )}
                        >
                          <div
                            data-plasmic-name={"heroInfoBodyText"}
                            data-plasmic-override={overrides.heroInfoBodyText}
                            className={classNames(
                              projectcss.all,
                              sty.heroInfoBodyText
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cyWt5
                              )}
                            >
                              {
                                "The home-buying process can be complicated. Our licensed professionals will make it simple and give you everything you need."
                              }
                            </div>
                          </div>

                          <Button
                            data-plasmic-name={"heroInfoBodyButton"}
                            data-plasmic-override={overrides.heroInfoBodyButton}
                            className={classNames(
                              "__wab_instance",
                              sty.heroInfoBodyButton
                            )}
                            color={["navyDark"]}
                          >
                            {"Buyer's Guide"}
                          </Button>
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  </p.Stack>
                ) : null}

                <p.Stack
                  as={"aside"}
                  data-plasmic-name={"heroInfoAside"}
                  data-plasmic-override={overrides.heroInfoAside}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.heroInfoAside)}
                >
                  <div
                    data-plasmic-name={"heroInfoAsideHeader"}
                    data-plasmic-override={overrides.heroInfoAsideHeader}
                    className={classNames(
                      projectcss.all,
                      sty.heroInfoAsideHeader
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wfvZl
                      )}
                    >
                      {"Stay in touch with the \nlatest properties"}
                    </div>
                  </div>

                  <form
                    data-plasmic-name={"heroInfoAsideForm"}
                    data-plasmic-override={overrides.heroInfoAsideForm}
                    className={classNames(
                      projectcss.all,
                      sty.heroInfoAsideForm
                    )}
                  >
                    {true ? (
                      <div
                        data-plasmic-name={"heroInfoAsideFormContainer"}
                        data-plasmic-override={
                          overrides.heroInfoAsideFormContainer
                        }
                        className={classNames(
                          projectcss.all,
                          sty.heroInfoAsideFormContainer
                        )}
                      >
                        <TextInput
                          data-plasmic-name={"emailInput"}
                          data-plasmic-override={overrides.emailInput}
                          className={classNames(
                            "__wab_instance",
                            sty.emailInput
                          )}
                          defaultValue={""}
                        />

                        <Button
                          data-plasmic-name={"emailButton"}
                          data-plasmic-override={overrides.emailButton}
                          className={classNames(
                            "__wab_instance",
                            sty.emailButton
                          )}
                          color={["navyDark"]}
                        >
                          {"Submit"}
                        </Button>
                      </div>
                    ) : null}
                  </form>

                  {true ? (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"heroInfoAsideBottom"}
                      data-plasmic-override={overrides.heroInfoAsideBottom}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.heroInfoAsideBottom
                      )}
                    >
                      {true ? (
                        <div
                          data-plasmic-name={"heroInfoAsideMap"}
                          data-plasmic-override={overrides.heroInfoAsideMap}
                          className={classNames(
                            projectcss.all,
                            sty.heroInfoAsideMap
                          )}
                        />
                      ) : null}
                      {true ? (
                        <div
                          data-plasmic-name={"heroInfoAsideMapinfo"}
                          data-plasmic-override={overrides.heroInfoAsideMapinfo}
                          className={classNames(
                            projectcss.all,
                            sty.heroInfoAsideMapinfo
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              data-plasmic-name={"heroInfoAsideMaptext"}
                              data-plasmic-override={
                                overrides.heroInfoAsideMaptext
                              }
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.heroInfoAsideMaptext
                              )}
                            >
                              <div
                                data-plasmic-name={"heroInfoAsideMaptext1"}
                                data-plasmic-override={
                                  overrides.heroInfoAsideMaptext1
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.heroInfoAsideMaptext1
                                )}
                              >
                                {"Horizon Development Realty"}
                              </div>

                              <div
                                data-plasmic-name={"heroInfoAsideMaptext12"}
                                data-plasmic-override={
                                  overrides.heroInfoAsideMaptext12
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.heroInfoAsideMaptext12
                                )}
                              >
                                {"218-14 Northern Blvd \nBayside, NY 11364"}
                              </div>

                              <div
                                data-plasmic-name={"heroInfoAsideMaptext13"}
                                data-plasmic-override={
                                  overrides.heroInfoAsideMaptext13
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.heroInfoAsideMaptext13
                                )}
                              >
                                {"(917)-454-8392"}
                              </div>
                            </p.Stack>
                          ) : null}
                        </div>
                      ) : null}
                    </p.Stack>
                  ) : null}
                </p.Stack>
              </p.Stack>
            </p.Stack>

            <div
              data-plasmic-name={"communities"}
              data-plasmic-override={overrides.communities}
              className={classNames(projectcss.all, sty.communities)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"communitiesContainer"}
                data-plasmic-override={overrides.communitiesContainer}
                hasGap={true}
                className={classNames(projectcss.all, sty.communitiesContainer)}
              >
                <div
                  data-plasmic-name={"communitiesHeader"}
                  data-plasmic-override={overrides.communitiesHeader}
                  className={classNames(projectcss.all, sty.communitiesHeader)}
                >
                  <div
                    data-plasmic-name={"heroInfoTitleText2"}
                    data-plasmic-override={overrides.heroInfoTitleText2}
                    className={classNames(
                      projectcss.all,
                      sty.heroInfoTitleText2
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__f63PQ
                      )}
                    >
                      {"Communities"}
                    </div>
                  </div>
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"communitiesBody"}
                  data-plasmic-override={overrides.communitiesBody}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.communitiesBody)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"communitiesRow"}
                    data-plasmic-override={overrides.communitiesRow}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.communitiesRow)}
                  >
                    {true ? (
                      <CommunitiesCard
                        className={classNames(
                          "__wab_instance",
                          sty.communitiesCard___55Sd0
                        )}
                      />
                    ) : null}
                    {true ? (
                      <CommunitiesCard
                        className={classNames(
                          "__wab_instance",
                          sty.communitiesCard__dS7Cj
                        )}
                        communitiesCardLabel={"Queens"}
                      />
                    ) : null}
                    {true ? (
                      <CommunitiesCard
                        className={classNames(
                          "__wab_instance",
                          sty.communitiesCard__q0W71
                        )}
                      />
                    ) : null}
                  </p.Stack>

                  <div
                    data-plasmic-name={"communitiesRow2"}
                    data-plasmic-override={overrides.communitiesRow2}
                    className={classNames(projectcss.all, sty.communitiesRow2)}
                  >
                    {true ? (
                      <CommunitiesCard
                        className={classNames(
                          "__wab_instance",
                          sty.communitiesCard__ldGku
                        )}
                      />
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <CommunitiesCard
                        className={classNames(
                          "__wab_instance",
                          sty.communitiesCard__iodEr
                        )}
                      />
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <CommunitiesCard
                        className={classNames(
                          "__wab_instance",
                          sty.communitiesCard__z4Hzi
                        )}
                      />
                    ) : null}
                  </div>
                </p.Stack>
              </p.Stack>
            </div>

            <div
              data-plasmic-name={"testimonials"}
              data-plasmic-override={overrides.testimonials}
              className={classNames(projectcss.all, sty.testimonials)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"testimonialsContainer"}
                  data-plasmic-override={overrides.testimonialsContainer}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.testimonialsContainer
                  )}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"testimonialsHeader"}
                    data-plasmic-override={overrides.testimonialsHeader}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.testimonialsHeader
                    )}
                  >
                    <div
                      data-plasmic-name={"testimonialsTitle"}
                      data-plasmic-override={overrides.testimonialsTitle}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.testimonialsTitle
                      )}
                    >
                      {"Testimonials"}
                    </div>

                    <div
                      data-plasmic-name={"testimonialsText"}
                      data-plasmic-override={overrides.testimonialsText}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.testimonialsText
                      )}
                    >
                      {"See what our clients have to say about us"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"testimonialsBlock"}
                    data-plasmic-override={overrides.testimonialsBlock}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.testimonialsBlock
                    )}
                  >
                    <TestimonialTop
                      className={classNames(
                        "__wab_instance",
                        sty.testimonialTop__oInM
                      )}
                    />

                    <TestimonialBottom
                      data-plasmic-name={"testimonialBottom"}
                      data-plasmic-override={overrides.testimonialBottom}
                      className={classNames(
                        "__wab_instance",
                        sty.testimonialBottom
                      )}
                    />

                    <TestimonialTop
                      className={classNames(
                        "__wab_instance",
                        sty.testimonialTop__saoAz
                      )}
                    />

                    {true ? (
                      <div
                        data-plasmic-name={"testimonial5"}
                        data-plasmic-override={overrides.testimonial5}
                        className={classNames(projectcss.all, sty.testimonial5)}
                      >
                        <div
                          data-plasmic-name={"quotation5"}
                          data-plasmic-override={overrides.quotation5}
                          className={classNames(projectcss.all, sty.quotation5)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wy4NH
                            )}
                          >
                            {"”"}
                          </div>
                        </div>

                        {true ? (
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"testimonialBottom3"}
                            data-plasmic-override={overrides.testimonialBottom3}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.testimonialBottom3
                            )}
                          >
                            <div
                              data-plasmic-name={"quote2"}
                              data-plasmic-override={overrides.quote2}
                              className={classNames(projectcss.all, sty.quote2)}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__uhrGr
                                )}
                              >
                                {
                                  "The folks at Horizon Development\nhelped me every step of the way in buying my first home. They negotiated on my behalf to lower the final buying price and I couldn’t be happier. I’d highly recommend their services to anyone looking to buy a home in New York."
                                }
                              </div>
                            </div>

                            <div
                              data-plasmic-name={"testimonialProfile3"}
                              data-plasmic-override={
                                overrides.testimonialProfile3
                              }
                              className={classNames(
                                projectcss.all,
                                sty.testimonialProfile3
                              )}
                            >
                              <div
                                data-plasmic-name={"profileImg3"}
                                data-plasmic-override={overrides.profileImg3}
                                className={classNames(
                                  projectcss.all,
                                  sty.profileImg3
                                )}
                              />

                              <p.Stack
                                as={"div"}
                                data-plasmic-name={"profileInfo3"}
                                data-plasmic-override={overrides.profileInfo3}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.profileInfo3
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__gWoLz
                                  )}
                                >
                                  {"Sharon Lee"}
                                </div>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___39AtN
                                  )}
                                >
                                  {"Home Buyer from Flushing"}
                                </div>
                              </p.Stack>
                            </div>
                          </p.Stack>
                        ) : null}
                      </div>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        data-plasmic-name={"testimonialMobilePadding"}
                        data-plasmic-override={
                          overrides.testimonialMobilePadding
                        }
                        className={classNames(
                          projectcss.all,
                          sty.testimonialMobilePadding
                        )}
                      />
                    ) : null}
                  </p.Stack>
                </p.Stack>
              ) : null}
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              hasGap={true}
              className={classNames(projectcss.all, sty.footer)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"footerTitle"}
                data-plasmic-override={overrides.footerTitle}
                hasGap={true}
                className={classNames(projectcss.all, sty.footerTitle)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__bNz8)}
                  displayHeight={"37px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"36px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_project/images/image3.svg",
                    fullWidth: 145,
                    fullHeight: 150,
                    aspectRatio: 0.967742
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eJxvf
                  )}
                >
                  {"Horizon Development"}
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"footerBody"}
                data-plasmic-override={overrides.footerBody}
                hasGap={true}
                className={classNames(projectcss.all, sty.footerBody)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"footerBodyStart"}
                  data-plasmic-override={overrides.footerBodyStart}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.footerBodyStart)}
                >
                  {true ? (
                    <div
                      data-plasmic-name={"footerMap"}
                      data-plasmic-override={overrides.footerMap}
                      className={classNames(projectcss.all, sty.footerMap)}
                    />
                  ) : null}
                  {true ? (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"footerContact"}
                      data-plasmic-override={overrides.footerContact}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.footerContact)}
                    >
                      <div
                        data-plasmic-name={"heroInfoAsideMaptext14"}
                        data-plasmic-override={overrides.heroInfoAsideMaptext14}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.heroInfoAsideMaptext14
                        )}
                      >
                        {
                          "Horizon Development Realty\n218-14 Northern Blvd \nBayside, NY 11364\n(917)-454-8392"
                        }
                      </div>
                    </p.Stack>
                  ) : null}
                </p.Stack>

                <div
                  data-plasmic-name={"footerBodyMiddle"}
                  data-plasmic-override={overrides.footerBodyMiddle}
                  className={classNames(projectcss.all, sty.footerBodyMiddle)}
                >
                  {true ? (
                    <div
                      data-plasmic-name={"sitemap"}
                      data-plasmic-override={overrides.sitemap}
                      className={classNames(projectcss.all, sty.sitemap)}
                    >
                      <div
                        data-plasmic-name={"sitemapTitle"}
                        data-plasmic-override={overrides.sitemapTitle}
                        className={classNames(projectcss.all, sty.sitemapTitle)}
                      >
                        <h6
                          data-plasmic-name={"h6"}
                          data-plasmic-override={overrides.h6}
                          className={classNames(
                            projectcss.all,
                            projectcss.h6,
                            projectcss.__wab_text,
                            sty.h6
                          )}
                        >
                          {"Sitemap"}
                        </h6>
                      </div>

                      <div
                        data-plasmic-name={"sitemapLinks"}
                        data-plasmic-override={overrides.sitemapLinks}
                        className={classNames(projectcss.all, sty.sitemapLinks)}
                      >
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__ssObz
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {"Communities"}
                        </p.PlasmicLink>

                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__rySMb
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {"Listings"}
                        </p.PlasmicLink>

                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__a0Qjp
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {"Agents"}
                        </p.PlasmicLink>

                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__qW3A
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {"About Us"}
                        </p.PlasmicLink>
                      </div>
                    </div>
                  ) : null}
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"footerBodyEnd"}
                  data-plasmic-override={overrides.footerBodyEnd}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.footerBodyEnd)}
                >
                  <div
                    data-plasmic-name={"footerEho"}
                    data-plasmic-override={overrides.footerEho}
                    className={classNames(projectcss.all, sty.footerEho)}
                  >
                    <Icon4Icon
                      data-plasmic-name={"ehoLogo"}
                      data-plasmic-override={overrides.ehoLogo}
                      className={classNames(projectcss.all, sty.ehoLogo)}
                      role={"img"}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__tq1CH)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__au8R4
                      )}
                    >
                      {
                        "We support the Fair Housing Act.\nWe pledge to provide equal opportunity for housing to any prospective customer or client, without regard to race, color, religion, sex, handicap, familial status or national origin."
                      }
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__c1Os3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ougqi
                      )}
                    >
                      {"© 2022 Horizon Development New York"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vuHhi
                      )}
                    >
                      {"All Rights Reserved"}
                    </div>
                  </div>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "wrapper",
    "hero",
    "navbar",
    "mobileMenuIcon",
    "svg",
    "heroText",
    "heroTextPrimary",
    "heroTextSm",
    "horizonDevelopmentHasHelpedNewYorkersFindAHomeTheyLoveWeGuaranteeThatWellFindSomethingGreatForYou",
    "heroBtn",
    "button",
    "heroMobileGradient",
    "recentListings",
    "recentListingsContainer",
    "recentListingsHeader",
    "recentListingsBlock",
    "heroInfo",
    "heroInfoContainer",
    "heroInfoMain",
    "heroInfoTitle",
    "heroInfoTitleText",
    "heroInfoBody",
    "heroInfoBodyImg",
    "heroInfoBodySide",
    "heroInfoBodyText",
    "heroInfoBodyButton",
    "heroInfoAside",
    "heroInfoAsideHeader",
    "heroInfoAsideForm",
    "heroInfoAsideFormContainer",
    "emailInput",
    "emailButton",
    "heroInfoAsideBottom",
    "heroInfoAsideMap",
    "heroInfoAsideMapinfo",
    "heroInfoAsideMaptext",
    "heroInfoAsideMaptext1",
    "heroInfoAsideMaptext12",
    "heroInfoAsideMaptext13",
    "communities",
    "communitiesContainer",
    "communitiesHeader",
    "heroInfoTitleText2",
    "communitiesBody",
    "communitiesRow",
    "communitiesRow2",
    "testimonials",
    "testimonialsContainer",
    "testimonialsHeader",
    "testimonialsTitle",
    "testimonialsText",
    "testimonialsBlock",
    "testimonialBottom",
    "testimonial5",
    "quotation5",
    "testimonialBottom3",
    "quote2",
    "testimonialProfile3",
    "profileImg3",
    "profileInfo3",
    "testimonialMobilePadding",
    "footer",
    "footerTitle",
    "footerBody",
    "footerBodyStart",
    "footerMap",
    "footerContact",
    "heroInfoAsideMaptext14",
    "footerBodyMiddle",
    "sitemap",
    "sitemapTitle",
    "h6",
    "sitemapLinks",
    "footerBodyEnd",
    "footerEho",
    "ehoLogo"
  ],

  wrapper: [
    "wrapper",
    "hero",
    "navbar",
    "mobileMenuIcon",
    "svg",
    "heroText",
    "heroTextPrimary",
    "heroTextSm",
    "horizonDevelopmentHasHelpedNewYorkersFindAHomeTheyLoveWeGuaranteeThatWellFindSomethingGreatForYou",
    "heroBtn",
    "button",
    "heroMobileGradient",
    "recentListings",
    "recentListingsContainer",
    "recentListingsHeader",
    "recentListingsBlock",
    "heroInfo",
    "heroInfoContainer",
    "heroInfoMain",
    "heroInfoTitle",
    "heroInfoTitleText",
    "heroInfoBody",
    "heroInfoBodyImg",
    "heroInfoBodySide",
    "heroInfoBodyText",
    "heroInfoBodyButton",
    "heroInfoAside",
    "heroInfoAsideHeader",
    "heroInfoAsideForm",
    "heroInfoAsideFormContainer",
    "emailInput",
    "emailButton",
    "heroInfoAsideBottom",
    "heroInfoAsideMap",
    "heroInfoAsideMapinfo",
    "heroInfoAsideMaptext",
    "heroInfoAsideMaptext1",
    "heroInfoAsideMaptext12",
    "heroInfoAsideMaptext13",
    "communities",
    "communitiesContainer",
    "communitiesHeader",
    "heroInfoTitleText2",
    "communitiesBody",
    "communitiesRow",
    "communitiesRow2",
    "testimonials",
    "testimonialsContainer",
    "testimonialsHeader",
    "testimonialsTitle",
    "testimonialsText",
    "testimonialsBlock",
    "testimonialBottom",
    "testimonial5",
    "quotation5",
    "testimonialBottom3",
    "quote2",
    "testimonialProfile3",
    "profileImg3",
    "profileInfo3",
    "testimonialMobilePadding",
    "footer",
    "footerTitle",
    "footerBody",
    "footerBodyStart",
    "footerMap",
    "footerContact",
    "heroInfoAsideMaptext14",
    "footerBodyMiddle",
    "sitemap",
    "sitemapTitle",
    "h6",
    "sitemapLinks",
    "footerBodyEnd",
    "footerEho",
    "ehoLogo"
  ],

  hero: [
    "hero",
    "navbar",
    "mobileMenuIcon",
    "svg",
    "heroText",
    "heroTextPrimary",
    "heroTextSm",
    "horizonDevelopmentHasHelpedNewYorkersFindAHomeTheyLoveWeGuaranteeThatWellFindSomethingGreatForYou",
    "heroBtn",
    "button",
    "heroMobileGradient"
  ],

  navbar: ["navbar"],
  mobileMenuIcon: ["mobileMenuIcon", "svg"],
  svg: ["svg"],
  heroText: [
    "heroText",
    "heroTextPrimary",
    "heroTextSm",
    "horizonDevelopmentHasHelpedNewYorkersFindAHomeTheyLoveWeGuaranteeThatWellFindSomethingGreatForYou",
    "heroBtn",
    "button"
  ],

  heroTextPrimary: ["heroTextPrimary"],
  heroTextSm: [
    "heroTextSm",
    "horizonDevelopmentHasHelpedNewYorkersFindAHomeTheyLoveWeGuaranteeThatWellFindSomethingGreatForYou"
  ],

  horizonDevelopmentHasHelpedNewYorkersFindAHomeTheyLoveWeGuaranteeThatWellFindSomethingGreatForYou:
    [
      "horizonDevelopmentHasHelpedNewYorkersFindAHomeTheyLoveWeGuaranteeThatWellFindSomethingGreatForYou"
    ],

  heroBtn: ["heroBtn", "button"],
  button: ["button"],
  heroMobileGradient: ["heroMobileGradient"],
  recentListings: [
    "recentListings",
    "recentListingsContainer",
    "recentListingsHeader",
    "recentListingsBlock"
  ],

  recentListingsContainer: [
    "recentListingsContainer",
    "recentListingsHeader",
    "recentListingsBlock"
  ],

  recentListingsHeader: ["recentListingsHeader"],
  recentListingsBlock: ["recentListingsBlock"],
  heroInfo: [
    "heroInfo",
    "heroInfoContainer",
    "heroInfoMain",
    "heroInfoTitle",
    "heroInfoTitleText",
    "heroInfoBody",
    "heroInfoBodyImg",
    "heroInfoBodySide",
    "heroInfoBodyText",
    "heroInfoBodyButton",
    "heroInfoAside",
    "heroInfoAsideHeader",
    "heroInfoAsideForm",
    "heroInfoAsideFormContainer",
    "emailInput",
    "emailButton",
    "heroInfoAsideBottom",
    "heroInfoAsideMap",
    "heroInfoAsideMapinfo",
    "heroInfoAsideMaptext",
    "heroInfoAsideMaptext1",
    "heroInfoAsideMaptext12",
    "heroInfoAsideMaptext13"
  ],

  heroInfoContainer: [
    "heroInfoContainer",
    "heroInfoMain",
    "heroInfoTitle",
    "heroInfoTitleText",
    "heroInfoBody",
    "heroInfoBodyImg",
    "heroInfoBodySide",
    "heroInfoBodyText",
    "heroInfoBodyButton",
    "heroInfoAside",
    "heroInfoAsideHeader",
    "heroInfoAsideForm",
    "heroInfoAsideFormContainer",
    "emailInput",
    "emailButton",
    "heroInfoAsideBottom",
    "heroInfoAsideMap",
    "heroInfoAsideMapinfo",
    "heroInfoAsideMaptext",
    "heroInfoAsideMaptext1",
    "heroInfoAsideMaptext12",
    "heroInfoAsideMaptext13"
  ],

  heroInfoMain: [
    "heroInfoMain",
    "heroInfoTitle",
    "heroInfoTitleText",
    "heroInfoBody",
    "heroInfoBodyImg",
    "heroInfoBodySide",
    "heroInfoBodyText",
    "heroInfoBodyButton"
  ],

  heroInfoTitle: ["heroInfoTitle", "heroInfoTitleText"],
  heroInfoTitleText: ["heroInfoTitleText"],
  heroInfoBody: [
    "heroInfoBody",
    "heroInfoBodyImg",
    "heroInfoBodySide",
    "heroInfoBodyText",
    "heroInfoBodyButton"
  ],

  heroInfoBodyImg: ["heroInfoBodyImg"],
  heroInfoBodySide: [
    "heroInfoBodySide",
    "heroInfoBodyText",
    "heroInfoBodyButton"
  ],

  heroInfoBodyText: ["heroInfoBodyText"],
  heroInfoBodyButton: ["heroInfoBodyButton"],
  heroInfoAside: [
    "heroInfoAside",
    "heroInfoAsideHeader",
    "heroInfoAsideForm",
    "heroInfoAsideFormContainer",
    "emailInput",
    "emailButton",
    "heroInfoAsideBottom",
    "heroInfoAsideMap",
    "heroInfoAsideMapinfo",
    "heroInfoAsideMaptext",
    "heroInfoAsideMaptext1",
    "heroInfoAsideMaptext12",
    "heroInfoAsideMaptext13"
  ],

  heroInfoAsideHeader: ["heroInfoAsideHeader"],
  heroInfoAsideForm: [
    "heroInfoAsideForm",
    "heroInfoAsideFormContainer",
    "emailInput",
    "emailButton"
  ],

  heroInfoAsideFormContainer: [
    "heroInfoAsideFormContainer",
    "emailInput",
    "emailButton"
  ],

  emailInput: ["emailInput"],
  emailButton: ["emailButton"],
  heroInfoAsideBottom: [
    "heroInfoAsideBottom",
    "heroInfoAsideMap",
    "heroInfoAsideMapinfo",
    "heroInfoAsideMaptext",
    "heroInfoAsideMaptext1",
    "heroInfoAsideMaptext12",
    "heroInfoAsideMaptext13"
  ],

  heroInfoAsideMap: ["heroInfoAsideMap"],
  heroInfoAsideMapinfo: [
    "heroInfoAsideMapinfo",
    "heroInfoAsideMaptext",
    "heroInfoAsideMaptext1",
    "heroInfoAsideMaptext12",
    "heroInfoAsideMaptext13"
  ],

  heroInfoAsideMaptext: [
    "heroInfoAsideMaptext",
    "heroInfoAsideMaptext1",
    "heroInfoAsideMaptext12",
    "heroInfoAsideMaptext13"
  ],

  heroInfoAsideMaptext1: ["heroInfoAsideMaptext1"],
  heroInfoAsideMaptext12: ["heroInfoAsideMaptext12"],
  heroInfoAsideMaptext13: ["heroInfoAsideMaptext13"],
  communities: [
    "communities",
    "communitiesContainer",
    "communitiesHeader",
    "heroInfoTitleText2",
    "communitiesBody",
    "communitiesRow",
    "communitiesRow2"
  ],

  communitiesContainer: [
    "communitiesContainer",
    "communitiesHeader",
    "heroInfoTitleText2",
    "communitiesBody",
    "communitiesRow",
    "communitiesRow2"
  ],

  communitiesHeader: ["communitiesHeader", "heroInfoTitleText2"],
  heroInfoTitleText2: ["heroInfoTitleText2"],
  communitiesBody: ["communitiesBody", "communitiesRow", "communitiesRow2"],
  communitiesRow: ["communitiesRow"],
  communitiesRow2: ["communitiesRow2"],
  testimonials: [
    "testimonials",
    "testimonialsContainer",
    "testimonialsHeader",
    "testimonialsTitle",
    "testimonialsText",
    "testimonialsBlock",
    "testimonialBottom",
    "testimonial5",
    "quotation5",
    "testimonialBottom3",
    "quote2",
    "testimonialProfile3",
    "profileImg3",
    "profileInfo3",
    "testimonialMobilePadding"
  ],

  testimonialsContainer: [
    "testimonialsContainer",
    "testimonialsHeader",
    "testimonialsTitle",
    "testimonialsText",
    "testimonialsBlock",
    "testimonialBottom",
    "testimonial5",
    "quotation5",
    "testimonialBottom3",
    "quote2",
    "testimonialProfile3",
    "profileImg3",
    "profileInfo3",
    "testimonialMobilePadding"
  ],

  testimonialsHeader: [
    "testimonialsHeader",
    "testimonialsTitle",
    "testimonialsText"
  ],

  testimonialsTitle: ["testimonialsTitle"],
  testimonialsText: ["testimonialsText"],
  testimonialsBlock: [
    "testimonialsBlock",
    "testimonialBottom",
    "testimonial5",
    "quotation5",
    "testimonialBottom3",
    "quote2",
    "testimonialProfile3",
    "profileImg3",
    "profileInfo3",
    "testimonialMobilePadding"
  ],

  testimonialBottom: ["testimonialBottom"],
  testimonial5: [
    "testimonial5",
    "quotation5",
    "testimonialBottom3",
    "quote2",
    "testimonialProfile3",
    "profileImg3",
    "profileInfo3"
  ],

  quotation5: ["quotation5"],
  testimonialBottom3: [
    "testimonialBottom3",
    "quote2",
    "testimonialProfile3",
    "profileImg3",
    "profileInfo3"
  ],

  quote2: ["quote2"],
  testimonialProfile3: ["testimonialProfile3", "profileImg3", "profileInfo3"],
  profileImg3: ["profileImg3"],
  profileInfo3: ["profileInfo3"],
  testimonialMobilePadding: ["testimonialMobilePadding"],
  footer: [
    "footer",
    "footerTitle",
    "footerBody",
    "footerBodyStart",
    "footerMap",
    "footerContact",
    "heroInfoAsideMaptext14",
    "footerBodyMiddle",
    "sitemap",
    "sitemapTitle",
    "h6",
    "sitemapLinks",
    "footerBodyEnd",
    "footerEho",
    "ehoLogo"
  ],

  footerTitle: ["footerTitle"],
  footerBody: [
    "footerBody",
    "footerBodyStart",
    "footerMap",
    "footerContact",
    "heroInfoAsideMaptext14",
    "footerBodyMiddle",
    "sitemap",
    "sitemapTitle",
    "h6",
    "sitemapLinks",
    "footerBodyEnd",
    "footerEho",
    "ehoLogo"
  ],

  footerBodyStart: [
    "footerBodyStart",
    "footerMap",
    "footerContact",
    "heroInfoAsideMaptext14"
  ],

  footerMap: ["footerMap"],
  footerContact: ["footerContact", "heroInfoAsideMaptext14"],
  heroInfoAsideMaptext14: ["heroInfoAsideMaptext14"],
  footerBodyMiddle: [
    "footerBodyMiddle",
    "sitemap",
    "sitemapTitle",
    "h6",
    "sitemapLinks"
  ],

  sitemap: ["sitemap", "sitemapTitle", "h6", "sitemapLinks"],
  sitemapTitle: ["sitemapTitle", "h6"],
  h6: ["h6"],
  sitemapLinks: ["sitemapLinks"],
  footerBodyEnd: ["footerBodyEnd", "footerEho", "ehoLogo"],
  footerEho: ["footerEho", "ehoLogo"],
  ehoLogo: ["ehoLogo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    wrapper: makeNodeComponent("wrapper"),
    hero: makeNodeComponent("hero"),
    navbar: makeNodeComponent("navbar"),
    mobileMenuIcon: makeNodeComponent("mobileMenuIcon"),
    svg: makeNodeComponent("svg"),
    heroText: makeNodeComponent("heroText"),
    heroTextPrimary: makeNodeComponent("heroTextPrimary"),
    heroTextSm: makeNodeComponent("heroTextSm"),
    horizonDevelopmentHasHelpedNewYorkersFindAHomeTheyLoveWeGuaranteeThatWellFindSomethingGreatForYou:
      makeNodeComponent(
        "horizonDevelopmentHasHelpedNewYorkersFindAHomeTheyLoveWeGuaranteeThatWellFindSomethingGreatForYou"
      ),

    heroBtn: makeNodeComponent("heroBtn"),
    button: makeNodeComponent("button"),
    heroMobileGradient: makeNodeComponent("heroMobileGradient"),
    recentListings: makeNodeComponent("recentListings"),
    recentListingsContainer: makeNodeComponent("recentListingsContainer"),
    recentListingsHeader: makeNodeComponent("recentListingsHeader"),
    recentListingsBlock: makeNodeComponent("recentListingsBlock"),
    heroInfo: makeNodeComponent("heroInfo"),
    heroInfoContainer: makeNodeComponent("heroInfoContainer"),
    heroInfoMain: makeNodeComponent("heroInfoMain"),
    heroInfoTitle: makeNodeComponent("heroInfoTitle"),
    heroInfoTitleText: makeNodeComponent("heroInfoTitleText"),
    heroInfoBody: makeNodeComponent("heroInfoBody"),
    heroInfoBodyImg: makeNodeComponent("heroInfoBodyImg"),
    heroInfoBodySide: makeNodeComponent("heroInfoBodySide"),
    heroInfoBodyText: makeNodeComponent("heroInfoBodyText"),
    heroInfoBodyButton: makeNodeComponent("heroInfoBodyButton"),
    heroInfoAside: makeNodeComponent("heroInfoAside"),
    heroInfoAsideHeader: makeNodeComponent("heroInfoAsideHeader"),
    heroInfoAsideForm: makeNodeComponent("heroInfoAsideForm"),
    heroInfoAsideFormContainer: makeNodeComponent("heroInfoAsideFormContainer"),
    emailInput: makeNodeComponent("emailInput"),
    emailButton: makeNodeComponent("emailButton"),
    heroInfoAsideBottom: makeNodeComponent("heroInfoAsideBottom"),
    heroInfoAsideMap: makeNodeComponent("heroInfoAsideMap"),
    heroInfoAsideMapinfo: makeNodeComponent("heroInfoAsideMapinfo"),
    heroInfoAsideMaptext: makeNodeComponent("heroInfoAsideMaptext"),
    heroInfoAsideMaptext1: makeNodeComponent("heroInfoAsideMaptext1"),
    heroInfoAsideMaptext12: makeNodeComponent("heroInfoAsideMaptext12"),
    heroInfoAsideMaptext13: makeNodeComponent("heroInfoAsideMaptext13"),
    communities: makeNodeComponent("communities"),
    communitiesContainer: makeNodeComponent("communitiesContainer"),
    communitiesHeader: makeNodeComponent("communitiesHeader"),
    heroInfoTitleText2: makeNodeComponent("heroInfoTitleText2"),
    communitiesBody: makeNodeComponent("communitiesBody"),
    communitiesRow: makeNodeComponent("communitiesRow"),
    communitiesRow2: makeNodeComponent("communitiesRow2"),
    testimonials: makeNodeComponent("testimonials"),
    testimonialsContainer: makeNodeComponent("testimonialsContainer"),
    testimonialsHeader: makeNodeComponent("testimonialsHeader"),
    testimonialsTitle: makeNodeComponent("testimonialsTitle"),
    testimonialsText: makeNodeComponent("testimonialsText"),
    testimonialsBlock: makeNodeComponent("testimonialsBlock"),
    testimonialBottom: makeNodeComponent("testimonialBottom"),
    testimonial5: makeNodeComponent("testimonial5"),
    quotation5: makeNodeComponent("quotation5"),
    testimonialBottom3: makeNodeComponent("testimonialBottom3"),
    quote2: makeNodeComponent("quote2"),
    testimonialProfile3: makeNodeComponent("testimonialProfile3"),
    profileImg3: makeNodeComponent("profileImg3"),
    profileInfo3: makeNodeComponent("profileInfo3"),
    testimonialMobilePadding: makeNodeComponent("testimonialMobilePadding"),
    footer: makeNodeComponent("footer"),
    footerTitle: makeNodeComponent("footerTitle"),
    footerBody: makeNodeComponent("footerBody"),
    footerBodyStart: makeNodeComponent("footerBodyStart"),
    footerMap: makeNodeComponent("footerMap"),
    footerContact: makeNodeComponent("footerContact"),
    heroInfoAsideMaptext14: makeNodeComponent("heroInfoAsideMaptext14"),
    footerBodyMiddle: makeNodeComponent("footerBodyMiddle"),
    sitemap: makeNodeComponent("sitemap"),
    sitemapTitle: makeNodeComponent("sitemapTitle"),
    h6: makeNodeComponent("h6"),
    sitemapLinks: makeNodeComponent("sitemapLinks"),
    footerBodyEnd: makeNodeComponent("footerBodyEnd"),
    footerEho: makeNodeComponent("footerEho"),
    ehoLogo: makeNodeComponent("ehoLogo"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
