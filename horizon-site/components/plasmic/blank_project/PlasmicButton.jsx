// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: akQUwPYY2eStENCEGYmmQw
// Component: r83GzkdYS5
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: akQUwPYY2eStENCEGYmmQw/projectcss
import sty from "./PlasmicButton.module.css"; // plasmic-import: r83GzkdYS5/css

export const PlasmicButton__VariantProps = new Array("color", "size");

export const PlasmicButton__ArgProps = new Array("children");

function PlasmicButton__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <button
      data-plasmic-name={"root2"}
      data-plasmic-override={overrides.root2}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root2,
        {
          [sty.root2color_greyLight]: hasVariant(
            variants,
            "color",
            "greyLight"
          ),

          [sty.root2color_navyDark]: hasVariant(variants, "color", "navyDark"),
          [sty.root2color_primary]: hasVariant(variants, "color", "primary"),
          [sty.root2size_large]: hasVariant(variants, "size", "large"),
          [sty.root2size_large_color_primary]:
            hasVariant(variants, "color", "primary") &&
            hasVariant(variants, "size", "large")
        }
      )}
    >
      <div
        data-plasmic-name={"btnContainer"}
        data-plasmic-override={overrides.btnContainer}
        className={classNames(projectcss.all, sty.btnContainer, {
          [sty.btnContainercolor_navyDark]: hasVariant(
            variants,
            "color",
            "navyDark"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Button",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrencolor_navyDark]: hasVariant(
              variants,
              "color",
              "navyDark"
            ),

            [sty.slotTargetChildrencolor_primary]: hasVariant(
              variants,
              "color",
              "primary"
            )
          })
        })}
      </div>
    </button>
  );
}

const PlasmicDescendants = {
  root2: ["root2", "btnContainer"],
  btnContainer: ["btnContainer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButton__ArgProps,
      internalVariantPropNames: PlasmicButton__VariantProps
    });

    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root2") {
    func.displayName = "PlasmicButton";
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root2"),
  {
    // Helper components rendering sub-elements
    btnContainer: makeNodeComponent("btnContainer"),
    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps
  }
);

export default PlasmicButton;
/* prettier-ignore-end */
