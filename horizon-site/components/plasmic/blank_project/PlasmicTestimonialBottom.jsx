// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: akQUwPYY2eStENCEGYmmQw
// Component: lJBkLAW_9b
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantshKdOjWx6MiWhf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HKdOJWx6MIWhf/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: akQUwPYY2eStENCEGYmmQw/projectcss
import sty from "./PlasmicTestimonialBottom.module.css"; // plasmic-import: lJBkLAW_9b/css

export const PlasmicTestimonialBottom__VariantProps = new Array();

export const PlasmicTestimonialBottom__ArgProps = new Array("children", "slot");

function PlasmicTestimonialBottom__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshKdOjWx6MiWhf()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"quotation2"}
        data-plasmic-override={overrides.quotation2}
        className={classNames(projectcss.all, sty.quotation2)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__nrsDk
          )}
        >
          {"‚Äù"}
        </div>
      </div>

      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"testimonialBottom2"}
          data-plasmic-override={overrides.testimonialBottom2}
          hasGap={true}
          className={classNames(projectcss.all, sty.testimonialBottom2)}
        >
          <div
            data-plasmic-name={"quote"}
            data-plasmic-override={overrides.quote}
            className={classNames(projectcss.all, sty.quote)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9Yr9N
              )}
            >
              {
                "I want to thank agent Chouhan and his team for the excellent services they provided for me and my family through the entire process of selling my home. They are professionals in real estate with the highest quality in Queens!"
              }
            </div>
          </div>

          <div
            data-plasmic-name={"testimonialProfile2"}
            data-plasmic-override={overrides.testimonialProfile2}
            className={classNames(projectcss.all, sty.testimonialProfile2)}
          >
            <div
              data-plasmic-name={"profileImg2"}
              data-plasmic-override={overrides.profileImg2}
              className={classNames(projectcss.all, sty.profileImg2)}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"profileInfo2"}
              data-plasmic-override={overrides.profileInfo2}
              hasGap={true}
              className={classNames(projectcss.all, sty.profileInfo2)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Sunny Patel",
                value: args.children,
                className: classNames(sty.slotTargetChildren)
              })}

              {p.renderPlasmicSlot({
                defaultContents: "Home Buyer from Bayside",
                value: args.slot,
                className: classNames(sty.slotTargetSlot)
              })}
            </p.Stack>
          </div>
        </p.Stack>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "quotation2",
    "testimonialBottom2",
    "quote",
    "testimonialProfile2",
    "profileImg2",
    "profileInfo2"
  ],

  quotation2: ["quotation2"],
  testimonialBottom2: [
    "testimonialBottom2",
    "quote",
    "testimonialProfile2",
    "profileImg2",
    "profileInfo2"
  ],

  quote: ["quote"],
  testimonialProfile2: ["testimonialProfile2", "profileImg2", "profileInfo2"],
  profileImg2: ["profileImg2"],
  profileInfo2: ["profileInfo2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTestimonialBottom__ArgProps,
      internalVariantPropNames: PlasmicTestimonialBottom__VariantProps
    });

    return PlasmicTestimonialBottom__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestimonialBottom";
  } else {
    func.displayName = `PlasmicTestimonialBottom.${nodeName}`;
  }
  return func;
}

export const PlasmicTestimonialBottom = Object.assign(
  // Top-level PlasmicTestimonialBottom renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    quotation2: makeNodeComponent("quotation2"),
    testimonialBottom2: makeNodeComponent("testimonialBottom2"),
    quote: makeNodeComponent("quote"),
    testimonialProfile2: makeNodeComponent("testimonialProfile2"),
    profileImg2: makeNodeComponent("profileImg2"),
    profileInfo2: makeNodeComponent("profileInfo2"),
    // Metadata about props expected for PlasmicTestimonialBottom
    internalVariantProps: PlasmicTestimonialBottom__VariantProps,
    internalArgProps: PlasmicTestimonialBottom__ArgProps
  }
);

export default PlasmicTestimonialBottom;
/* prettier-ignore-end */
